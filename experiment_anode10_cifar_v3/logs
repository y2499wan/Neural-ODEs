/scratch/yw6199/Neural-ODEs/anode.py
import os
import argparse
import logging
import time
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from models import conv1x1, Flatten, conv3x3, ConcatConv2d
from dataloaders import get_cifar_loaders, get_mnist_loaders
from utils import get_logger, makedirs, count_parameters, inf_generator, learning_rate_with_decay, RunningAverageMeter, accuracy

parser = argparse.ArgumentParser()
parser.add_argument('--network', type=str, choices=['resnet', 'odenet'], default='odenet')
parser.add_argument('--tol', type=float, default=1e-3)
parser.add_argument('--adjoint', type=eval, default=False, choices=[True, False])
parser.add_argument('--downsampling-method', type=str, default='conv', choices=['conv', 'res'])
parser.add_argument('--nepochs', type=int, default=50)
parser.add_argument('--data_aug', type=eval, default=True, choices=[True, False])
parser.add_argument('--lr', type=float, default=0.1)
parser.add_argument('--batch_size', type=int, default=128)
parser.add_argument('--test_batch_size', type=int, default=1000)
parser.add_argument('--extra_channels', type=int, default=1)
parser.add_argument('--dataset', type=str, choices=['mnist', 'cifar'], default='cifar')
parser.add_argument('--save', type=str, default='./experiment_anode1')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--gpu', type=int, default=0)
args = parser.parse_args()

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint

# norm is different from the other two methods (SONODE and NODE)
def norm(dim):
    return nn.GroupNorm(dim, dim)


class ResBlock(nn.Module):
    expansion = 1

    def __init__(self, inplanes, planes, stride=1, downsample=None):
        super(ResBlock, self).__init__()
        self.norm1 = norm(inplanes)
        self.relu = nn.ReLU(inplace=True)
        self.downsample = downsample
        self.conv1 = conv3x3(inplanes, planes, stride)
        self.norm2 = norm(planes)
        self.conv2 = conv3x3(planes, planes)

    def forward(self, x):
        shortcut = x

        out = self.relu(self.norm1(x))

        if self.downsample is not None:
            shortcut = self.downsample(out)

        out = self.conv1(out)
        out = self.norm2(out)
        out = self.relu(out)
        out = self.conv2(out)

        return out + shortcut

class ODEfunc(nn.Module):

    def __init__(self, dim):
        super(ODEfunc, self).__init__()
        self.norm1 = norm(dim)
        self.relu = nn.ReLU(inplace=True)
        self.conv1 = ConcatConv2d(dim, dim, 3, 1, 1)
        self.norm2 = norm(dim)
        self.conv2 = ConcatConv2d(dim, dim, 3, 1, 1)
        self.norm3 = norm(dim)
        self.nfe = 0

    def forward(self, t, x):
        self.nfe += 1
        out = self.norm1(x)
        out = self.relu(out)
        out = self.conv1(t, out)
        out = self.norm2(out)
        out = self.relu(out)
        out = self.conv2(t, out)
        out = self.norm3(out)
        return out


class ODEBlock(nn.Module):

    def __init__(self, odefunc):
        super(ODEBlock, self).__init__()
        self.odefunc = odefunc
        self.integration_time = torch.tensor([0, 1]).float()
        # self.zeros = torch.zeros(args.extra_channels, 7, 7).float().to(device)

    def forward(self, x):
        sz = x[0].size()[-1]
        zeros = torch.zeros(args.extra_channels, sz, sz).float().to(device)
        z = torch.empty(len(x), 64+args.extra_channels, sz, sz).to(device)
        for i in range(len(x)):
            z[i] = torch.cat((x[i], zeros))
        self.integration_time = self.integration_time.type_as(z)
        out = odeint(self.odefunc, z, self.integration_time, rtol=args.tol, atol=args.tol)
        out = out[1]
        return out

    @property
    def nfe(self):
        return self.odefunc.nfe

    @nfe.setter
    def nfe(self, value):
        self.odefunc.nfe = value


if __name__ == '__main__':

    makedirs(args.save)
    logger = get_logger(logpath=os.path.join(args.save, 'logs'), filepath=os.path.abspath(__file__))
    logger.info(args)

    device = torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')

    is_odenet = args.network == 'odenet'
    in_channel = 3
    if args.dataset == 'mnist':
        in_channel = 1
    if args.downsampling_method == 'conv':
        downsampling_layers = [
            nn.Conv2d(in_channel, 64, 3, 1),
            norm(64),
            nn.ReLU(inplace=True),
            nn.Conv2d(64, 64, 4, 2, 1),
            norm(64),
            nn.ReLU(inplace=True),
            nn.Conv2d(64, 64, 4, 2, 1),
        ]
    elif args.downsampling_method == 'res':
        downsampling_layers = [
            nn.Conv2d(in_channel, 64, 3, 1),
            ResBlock(64, 64, stride=2, downsample=conv1x1(64, 64, 2)),
            ResBlock(64, 64, stride=2, downsample=conv1x1(64, 64, 2)),
        ]

    feature_layers = [ODEBlock(ODEfunc(64+args.extra_channels))] if is_odenet else [ResBlock(64, 64) for _ in range(6)]
    fc_layers = [norm(64+args.extra_channels), nn.ReLU(inplace=True), nn.AdaptiveAvgPool2d((1, 1)), Flatten(), nn.Linear(64+args.extra_channels, 10)]

    model = nn.Sequential(*downsampling_layers, *feature_layers, *fc_layers).to(device)

    logger.info(model)
    logger.info('Number of parameters: {}'.format(count_parameters(model)))

    criterion = nn.CrossEntropyLoss().to(device)

    if args.dataset == 'mnist':
        train_loader, test_loader, train_eval_loader = get_mnist_loaders(
            args.data_aug, args.batch_size, args.test_batch_size
        )
    elif args.dataset == 'cifar':
        train_loader, test_loader, train_eval_loader = get_cifar_loaders(
            args.data_aug, args.batch_size, args.test_batch_size
        )

    data_gen = inf_generator(train_loader)
    batches_per_epoch = len(train_loader)

    lr_fn = learning_rate_with_decay(
        args.batch_size, batch_denom=128, batches_per_epoch=batches_per_epoch, boundary_epochs=[60, 100, 140],
        decay_rates=[1, 0.1, 0.01, 0.001], lr=args.lr
    )

    optimizer = torch.optim.SGD(model.parameters(), lr=args.lr, momentum=0.9)

    best_acc = 0
    batch_time_meter = RunningAverageMeter()
    f_nfe_meter = RunningAverageMeter()
    b_nfe_meter = RunningAverageMeter()
    end = time.time()
    
    epoch_arr = []
    time_val_arr = []
    time_avg_arr = []
    nfe_f_arr = []
    nfe_b_arr = []
    train_acc_arr = []
    test_acc_arr = []
    
    
    for itr in range(args.nepochs * batches_per_epoch):

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr_fn(itr)

        optimizer.zero_grad()
        x, y = data_gen.__next__()
        x = x.to(device)
        y = y.to(device)
        logits = model(x)
        loss = criterion(logits, y)

        if is_odenet:
            nfe_forward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        loss.backward()
        optimizer.step()

        if is_odenet:
            nfe_backward = feature_layers[0].nfe
            feature_layers[0].nfe = 0

        batch_time_meter.update(time.time() - end)
        if is_odenet:
            f_nfe_meter.update(nfe_forward)
            b_nfe_meter.update(nfe_backward)
        end = time.time()

        if itr % batches_per_epoch == 0:
            with torch.no_grad():
                train_acc = accuracy(model, train_eval_loader, device)
                val_acc = accuracy(model, test_loader, device)
                if val_acc > best_acc:
                    torch.save({'state_dict': model.state_dict(), 'args': args}, os.path.join(args.save, 'model.pth'))
                    best_acc = val_acc
                logger.info(
                    "Epoch {:04d} | Time {:.3f} ({:.3f}) | NFE-F {:.1f} | NFE-B {:.1f} | "
                    "Train Acc {:.4f} | Test Acc {:.4f}".format(
                        itr // batches_per_epoch, batch_time_meter.val, batch_time_meter.avg, f_nfe_meter.avg,
                        b_nfe_meter.avg, train_acc, val_acc
                    )
                )
                epoch_arr += [itr // batches_per_epoch]
                time_val_arr += [batch_time_meter.val]
                time_avg_arr += [batch_time_meter.avg]
                nfe_f_arr += [f_nfe_meter.avg]
                nfe_b_arr += [b_nfe_meter.avg]
                train_acc_arr += [train_acc]
                test_acc_arr += [val_acc]
    
    epoch_arr = np.asarray(epoch_arr)
    time_val_arr = np.asarray(time_val_arr)
    time_avg_arr = np.asarray(time_avg_arr)
    nfe_f_arr = np.asarray(nfe_f_arr)
    nfe_b_arr = np.asarray(nfe_b_arr)
    train_acc_arr = np.asarray(train_acc_arr)
    test_acc_arr = np.asarray(test_acc_arr)
    
    np.save(os.path.join(args.save, 'epoch_arr.npy'), epoch_arr)
    np.save(os.path.join(args.save, 'time_val_arr.npy'), time_val_arr)
    np.save(os.path.join(args.save, 'time_avg_arr.npy'), time_avg_arr)
    np.save(os.path.join(args.save, 'nfe_f_arr.npy'), nfe_f_arr)
    np.save(os.path.join(args.save, 'nfe_b_arr.npy'), nfe_b_arr)
    np.save(os.path.join(args.save, 'train_acc_arr.npy'), train_acc_arr)
    np.save(os.path.join(args.save, 'test_acc_arr.npy'), test_acc_arr)
    
    
    
    
Namespace(adjoint=False, batch_size=128, data_aug=True, dataset='cifar', debug=False, downsampling_method='conv', extra_channels=10, gpu=0, lr=0.1, nepochs=50, network='odenet', save='./experiment_anode10_cifar_v3', test_batch_size=1000, tol=0.001)
Sequential(
  (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1))
  (1): GroupNorm(64, 64, eps=1e-05, affine=True)
  (2): ReLU(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): GroupNorm(64, 64, eps=1e-05, affine=True)
  (5): ReLU(inplace=True)
  (6): Conv2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): ODEBlock(
    (odefunc): ODEfunc(
      (norm1): GroupNorm(74, 74, eps=1e-05, affine=True)
      (relu): ReLU(inplace=True)
      (conv1): ConcatConv2d(
        (_layer): Conv2d(75, 74, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (norm2): GroupNorm(74, 74, eps=1e-05, affine=True)
      (conv2): ConcatConv2d(
        (_layer): Conv2d(75, 74, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (norm3): GroupNorm(74, 74, eps=1e-05, affine=True)
    )
  )
  (8): GroupNorm(74, 74, eps=1e-05, affine=True)
  (9): ReLU(inplace=True)
  (10): AdaptiveAvgPool2d(output_size=(1, 1))
  (11): Flatten()
  (12): Linear(in_features=74, out_features=10, bias=True)
)
Number of parameters: 234638
Epoch 0000 | Time 0.773 (0.773) | NFE-F 38.0 | NFE-B 0.0 | Train Acc 0.1000 | Test Acc 0.1000
Epoch 0001 | Time 0.183 (0.124) | NFE-F 29.1 | NFE-B 0.0 | Train Acc 0.2215 | Test Acc 0.2234
Epoch 0002 | Time 0.207 (0.118) | NFE-F 31.9 | NFE-B 0.0 | Train Acc 0.3827 | Test Acc 0.3773
Epoch 0003 | Time 0.216 (0.122) | NFE-F 32.4 | NFE-B 0.0 | Train Acc 0.4465 | Test Acc 0.4307
Epoch 0004 | Time 0.230 (0.121) | NFE-F 32.4 | NFE-B 0.0 | Train Acc 0.4753 | Test Acc 0.4608
Epoch 0005 | Time 0.203 (0.121) | NFE-F 32.4 | NFE-B 0.0 | Train Acc 0.4928 | Test Acc 0.4823
Epoch 0006 | Time 0.213 (0.120) | NFE-F 32.4 | NFE-B 0.0 | Train Acc 0.4959 | Test Acc 0.4887
Epoch 0007 | Time 0.196 (0.120) | NFE-F 32.4 | NFE-B 0.0 | Train Acc 0.4805 | Test Acc 0.4739
Epoch 0008 | Time 0.214 (0.121) | NFE-F 32.4 | NFE-B 0.0 | Train Acc 0.5071 | Test Acc 0.4978
Epoch 0009 | Time 0.207 (0.120) | NFE-F 32.4 | NFE-B 0.0 | Train Acc 0.5520 | Test Acc 0.5392
Epoch 0010 | Time 0.202 (0.120) | NFE-F 32.4 | NFE-B 0.0 | Train Acc 0.5855 | Test Acc 0.5694
Epoch 0011 | Time 0.199 (0.121) | NFE-F 32.4 | NFE-B 0.0 | Train Acc 0.5511 | Test Acc 0.5401
Epoch 0012 | Time 0.203 (0.121) | NFE-F 32.4 | NFE-B 0.0 | Train Acc 0.5947 | Test Acc 0.5816
Epoch 0013 | Time 0.199 (0.120) | NFE-F 32.4 | NFE-B 0.0 | Train Acc 0.6446 | Test Acc 0.6333
Epoch 0014 | Time 0.206 (0.121) | NFE-F 32.4 | NFE-B 0.0 | Train Acc 0.5678 | Test Acc 0.5668
Epoch 0015 | Time 0.195 (0.121) | NFE-F 32.4 | NFE-B 0.0 | Train Acc 0.4995 | Test Acc 0.4905
Epoch 0016 | Time 0.202 (0.121) | NFE-F 32.4 | NFE-B 0.0 | Train Acc 0.6397 | Test Acc 0.6311
Epoch 0017 | Time 0.196 (0.120) | NFE-F 32.5 | NFE-B 0.0 | Train Acc 0.6220 | Test Acc 0.6113
Epoch 0018 | Time 0.215 (0.120) | NFE-F 32.4 | NFE-B 0.0 | Train Acc 0.6182 | Test Acc 0.6067
Epoch 0019 | Time 0.202 (0.121) | NFE-F 32.4 | NFE-B 0.0 | Train Acc 0.6645 | Test Acc 0.6404
Epoch 0020 | Time 0.215 (0.121) | NFE-F 32.6 | NFE-B 0.0 | Train Acc 0.6720 | Test Acc 0.6471
Epoch 0021 | Time 0.218 (0.122) | NFE-F 33.0 | NFE-B 0.0 | Train Acc 0.6608 | Test Acc 0.6327
Epoch 0022 | Time 0.210 (0.122) | NFE-F 32.9 | NFE-B 0.0 | Train Acc 0.7009 | Test Acc 0.6742
Epoch 0023 | Time 0.231 (0.128) | NFE-F 34.7 | NFE-B 0.0 | Train Acc 0.6938 | Test Acc 0.6673
Epoch 0024 | Time 0.242 (0.131) | NFE-F 35.8 | NFE-B 0.0 | Train Acc 0.7152 | Test Acc 0.6856
Epoch 0025 | Time 0.227 (0.129) | NFE-F 34.8 | NFE-B 0.0 | Train Acc 0.6996 | Test Acc 0.6784
Epoch 0026 | Time 0.218 (0.127) | NFE-F 34.7 | NFE-B 0.0 | Train Acc 0.6334 | Test Acc 0.6088
Epoch 0027 | Time 0.205 (0.122) | NFE-F 32.8 | NFE-B 0.0 | Train Acc 0.5462 | Test Acc 0.5366
Epoch 0028 | Time 0.234 (0.123) | NFE-F 33.2 | NFE-B 0.0 | Train Acc 0.6532 | Test Acc 0.6319
Epoch 0029 | Time 0.247 (0.136) | NFE-F 37.2 | NFE-B 0.0 | Train Acc 0.6706 | Test Acc 0.6464
Epoch 0030 | Time 0.227 (0.137) | NFE-F 37.7 | NFE-B 0.0 | Train Acc 0.6875 | Test Acc 0.6641
Epoch 0031 | Time 0.218 (0.136) | NFE-F 37.5 | NFE-B 0.0 | Train Acc 0.7246 | Test Acc 0.6980
Epoch 0032 | Time 0.222 (0.136) | NFE-F 37.4 | NFE-B 0.0 | Train Acc 0.7427 | Test Acc 0.7105
Epoch 0033 | Time 0.245 (0.139) | NFE-F 38.2 | NFE-B 0.0 | Train Acc 0.7307 | Test Acc 0.6977
Epoch 0034 | Time 0.223 (0.139) | NFE-F 38.4 | NFE-B 0.0 | Train Acc 0.7456 | Test Acc 0.7102
Epoch 0035 | Time 0.234 (0.139) | NFE-F 38.4 | NFE-B 0.0 | Train Acc 0.7480 | Test Acc 0.7101
Epoch 0036 | Time 0.217 (0.139) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.7658 | Test Acc 0.7257
Epoch 0037 | Time 0.247 (0.140) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.7687 | Test Acc 0.7282
Epoch 0038 | Time 0.218 (0.139) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.7681 | Test Acc 0.7285
Epoch 0039 | Time 0.235 (0.140) | NFE-F 38.4 | NFE-B 0.0 | Train Acc 0.7422 | Test Acc 0.7043
Epoch 0040 | Time 0.246 (0.140) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.7752 | Test Acc 0.7368
Epoch 0041 | Time 0.229 (0.139) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.7620 | Test Acc 0.7238
Epoch 0042 | Time 0.219 (0.140) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.7844 | Test Acc 0.7372
Epoch 0043 | Time 0.222 (0.140) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.7918 | Test Acc 0.7401
Epoch 0044 | Time 0.218 (0.139) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.7832 | Test Acc 0.7375
Epoch 0045 | Time 0.242 (0.140) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.7907 | Test Acc 0.7383
Epoch 0046 | Time 0.229 (0.139) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.7979 | Test Acc 0.7468
Epoch 0047 | Time 0.234 (0.140) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.7960 | Test Acc 0.7453
Epoch 0048 | Time 0.223 (0.138) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.8000 | Test Acc 0.7450
Epoch 0049 | Time 0.214 (0.138) | NFE-F 38.5 | NFE-B 0.0 | Train Acc 0.8005 | Test Acc 0.7506
